<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Status Timers (Red / Yellow / Green)</title>
<style>
  :root {
    --bg: #0b0c10;
    --panel: #121318;
    --ink: #e8eef2;
    --muted: #a9b3bd;
    --accent: #2f80ed;
    --border: #262933;
    --good: #1db954;   /* green */
    --warn: #f2c94c;   /* yellow */
    --bad:  #eb5757;   /* red */
  }
  * { box-sizing: border-box; }
  body {
    margin: 0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
    background: linear-gradient(180deg, #0b0c10, #0f1117 60%, #0b0c10);
    color: var(--ink);
  }
  .wrap { max-width: 1100px; margin: 40px auto; padding: 0 16px; }
  h1 { margin: 0 0 12px; font-size: 28px; font-weight: 800; letter-spacing: .2px; }
  .sub { color: var(--muted); margin-bottom: 20px; }
  .panel {
    background: var(--panel); border: 1px solid var(--border); border-radius: 16px;
    padding: 16px; box-shadow: 0 10px 30px rgba(0,0,0,.25);
  }
  .toolbar { display: flex; gap: 8px; flex-wrap: wrap; margin-bottom: 12px; }
  button, .btn {
    border: 1px solid var(--border); background: #151824; color: var(--ink);
    padding: 10px 14px; border-radius: 12px; cursor: pointer; font-weight: 600;
  }
  button:hover { filter: brightness(1.15); }
  .btn-ghost { background: transparent; }
  .btn-primary { background: var(--accent); border-color: transparent; }
  .grid {
    width: 100%; border-collapse: collapse; overflow: hidden; border-radius: 12px; border: 1px solid var(--border);
  }
  .grid th, .grid td {
    padding: 12px; border-bottom: 1px solid var(--border); text-align: left; vertical-align: middle;
  }
  .grid th { background: #171922; color: #cfd6dd; font-weight: 700; font-size: 14px; }
  .grid td { background: #12141c; font-size: 14px; }
  .grid tr:last-child td { border-bottom: 0; }
  input[type="text"] {
    width: 100%; background: #0f1117; color: var(--ink); border: 1px solid var(--border);
    padding: 8px 10px; border-radius: 10px;
  }
  .status-btns { display: flex; gap: 6px; flex-wrap: wrap; }
  .chip {
    border-radius: 999px; border: 1px solid var(--border); padding: 8px 12px; font-weight: 700; font-size: 13px;
    background: #0f1117; cursor: pointer;
  }
  .chip.red   { background: color-mix(in oklab, var(--bad) 35%, #0f1117); }
  .chip.yellow{ background: color-mix(in oklab, var(--warn) 35%, #0f1117); }
  .chip.green { background: color-mix(in oklab, var(--good) 35%, #0f1117); }
  .pill {
    display: inline-flex; align-items: center; gap: 8px; border: 1px solid var(--border); background: #0f1117;
    padding: 8px 12px; border-radius: 999px; font-variant-numeric: tabular-nums;
  }
  .dot { width: 10px; height: 10px; border-radius: 50%; display: inline-block; }
  .dot.red { background: var(--bad); } .dot.yellow { background: var(--warn); } .dot.green { background: var(--good); }
  .muted { color: var(--muted); }
  .right { text-align: right; }
  .sm { font-size: 12px; color: var(--muted); }
  .no-data { text-align: center; padding: 24px; color: var(--muted); }
  @media (max-width: 720px){
    .grid th:nth-child(3), .grid td:nth-child(3),
    .grid th:nth-child(4), .grid td:nth-child(4){ display: none; }
  }
</style>
</head>
<body>
  <div class="wrap">
    <h1>R/Y/G Status Timers</h1>
    <div class="sub">Click a status color to stamp the <b>time of change</b> and see a live <b>elapsed timer</b>. Data stays in your browser.</div>

    <div class="panel">
      <div class="toolbar">
        <button class="btn-primary" id="addRowBtn">+ Add Row</button>
        <button class="btn" id="exportBtn">Export CSV</button>
        <button class="btn-ghost" id="resetBtn">Reset All</button>
        <span class="sm">Tip: edit the “Label” to name a station or task.</span>
      </div>

      <table class="grid" id="table">
        <thead>
          <tr>
            <th style="width:40%">Label</th>
            <th style="width:26%">Status</th>
            <th style="width:17%">Last Change</th>
            <th style="width:17%">Elapsed</th>
          </tr>
        </thead>
        <tbody id="tbody">
          <!-- rows injected here -->
        </tbody>
      </table>

      <div id="empty" class="no-data">No rows yet. Click <b>+ Add Row</b> to start.</div>
    </div>
  </div>

<script>
(function () {
  const STORAGE_KEY = "ryg_timers_v1";
  const tbody = document.getElementById("tbody");
  const empty = document.getElementById("empty");
  const addRowBtn = document.getElementById("addRowBtn");
  const exportBtn = document.getElementById("exportBtn");
  const resetBtn = document.getElementById("resetBtn");

  /** Data model
   * rows: [{ id, label, status: 'red'|'yellow'|'green'|null, changedAt: epoch_ms|null }]
   */
  let rows = load() || [];

  function load() {
    try { return JSON.parse(localStorage.getItem(STORAGE_KEY)); } catch { return null; }
  }
  function save() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(rows));
  }

  function fmtDate(ms){
    if (!ms) return "—";
    const d = new Date(ms);
    // Local date & time
    return d.toLocaleString();
  }
  function fmtElapsed(ms){
    if (!ms) return "—";
    const diff = Date.now() - ms;
    if (diff < 0) return "00:00:00";
    const s = Math.floor(diff / 1000);
    const hh = String(Math.floor(s / 3600)).padStart(2,"0");
    const mm = String(Math.floor((s % 3600)/60)).padStart(2,"0");
    const ss = String(s % 60).padStart(2,"0");
    return `${hh}:${mm}:${ss}`;
  }

  function newRow(label=""){
    return {
      id: crypto.randomUUID(),
      label,
      status: null,
      changedAt: null
    };
  }

  function render(){
    tbody.innerHTML = "";
    rows.forEach(r => {
      const tr = document.createElement("tr");

      // Label cell
      const tdLabel = document.createElement("td");
      const inp = document.createElement("input");
      inp.type = "text";
      inp.value = r.label || "";
      inp.placeholder = "Station / Task name…";
      inp.addEventListener("input", () => {
        r.label = inp.value;
        save();
      });
      tdLabel.appendChild(inp);

      // Status buttons cell
      const tdStatus = document.createElement("td");
      const wrap = document.createElement("div");
      wrap.className = "status-btns";

      ["red","yellow","green"].forEach(color => {
        const btn = document.createElement("button");
        btn.className = `chip ${color}`;
        btn.innerHTML = `<span class="dot ${color}"></span> ${color.toUpperCase()}`;
        btn.addEventListener("click", () => {
          // If clicking a different color or no status, set and stamp time
          if (r.status !== color) {
            r.status = color;
            r.changedAt = Date.now();
            save();
            updateRow(tr, r); // update timestamp immediately
          }
        });
        wrap.appendChild(btn);
      });
      tdStatus.appendChild(wrap);

      // Timestamp cell
      const tdStamp = document.createElement("td");
      tdStamp.dataset.kind = "stamp";
      tdStamp.textContent = fmtDate(r.changedAt);

      // Elapsed cell
      const tdElapsed = document.createElement("td");
      tdElapsed.dataset.kind = "elapsed";
      tdElapsed.textContent = fmtElapsed(r.changedAt);

      tr.appendChild(tdLabel);
      tr.appendChild(tdStatus);
      tr.appendChild(tdStamp);
      tr.appendChild(tdElapsed);

      tbody.appendChild(tr);
    });

    empty.style.display = rows.length ? "none" : "block";
  }

  function updateRow(tr, row){
    const stamp = tr.querySelector('td[data-kind="stamp"]');
    const elapsed = tr.querySelector('td[data-kind="elapsed"]');
    stamp.textContent = fmtDate(row.changedAt);
    elapsed.textContent = fmtElapsed(row.changedAt);
  }

  function tick(){
    // Update only the elapsed columns for performance
    const trs = [...tbody.querySelectorAll("tr")];
    trs.forEach((tr, idx) => {
      const r = rows[idx];
      const elapsed = tr.querySelector('td[data-kind="elapsed"]');
      if (elapsed) elapsed.textContent = fmtElapsed(r.changedAt);
    });
  }

  addRowBtn.addEventListener("click", () => {
    rows.push(newRow(`Station ${rows.length + 1}`));
    save();
    render();
  });

  exportBtn.addEventListener("click", () => {
    const header = ["Label","Status","Last Change","Elapsed"];
    const lines = [header.join(",")];
    rows.forEach(r => {
      lines.push([
        csv(r.label || ""),
        csv(r.status || ""),
        csv(fmtDate(r.changedAt)),
        csv(fmtElapsed(r.changedAt))
      ].join(","));
    });
    const blob = new Blob([lines.join("\n")], {type: "text/csv"});
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = "status-timers.csv"; a.click();
    URL.revokeObjectURL(url);
  });

  function csv(s){
    const t = (s ?? "").toString();
    if (/[,"\n]/.test(t)) return `"${t.replace(/"/g,'""')}"`;
    return t;
  }

  resetBtn.addEventListener("click", () => {
    if (!confirm("Reset all rows and clear local data?")) return;
    rows = [];
    save();
    render();
  });

  // Init
  if (rows.length === 0) {
    // Start with a couple of example rows
    rows = [newRow("Station 1"), newRow("Station 2")];
    save();
  }
  render();
  setInterval(tick, 1000);
})();
</script>
</body>
</html>
